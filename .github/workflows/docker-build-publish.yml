name: Build and Publish Docker Image

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      override_tag:
        description: 'Optional image tag to apply (e.g. rc-1)'
        required: false
        type: string

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image to GHCR
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/axanet:latest
            ghcr.io/${{ github.repository_owner }}/axanet:${{ github.sha }}
            ${{ inputs.override_tag && format('ghcr.io/{0}/axanet:{1}', github.repository_owner, inputs.override_tag) }}

      - name: Login to Docker Hub (optional)
        #if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - #name: Build and push image to Docker Hub (optional)
        #if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
        #uses: docker/build-push-action@v4
        #with:
        #  context: .
        #  file: ./Dockerfile
        #  push: true
        #  tags: |
        #    ${{ secrets.DOCKERHUB_USERNAME }}/axanet:latest
        #    ${{ secrets.DOCKERHUB_USERNAME }}/axanet:${{ github.sha }}

      - name: Report success
        run: |
          echo "Docker images built and published (where configured)."
