name: Application Code Modification Notification
on:
  workflow_dispatch:
    inputs:
      changed_path:
        description: 'Optional path to the changed file (for manual runs)'
        required: false
        default: ''
        type: string
  push:
    paths:
      - 'src/**'
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  notify-team:
    runs-on: ubuntu-latest
    steps:
      - name: Determine changed application files
        id: detect
        run: |
          python3 - <<'PY'
          import json, os, sys
          event_path = os.environ.get('GITHUB_EVENT_PATH')
          event_name = os.environ.get('GITHUB_EVENT_NAME')
          actor = os.environ.get('GITHUB_ACTOR')
          input_path = os.environ.get('INPUT_CHANGED_PATH', '')
          changed = []
          if input_path:
              changed = [input_path]
          if event_path and os.path.exists(event_path):
              with open(event_path, 'r', encoding='utf-8') as f:
                  ev = json.load(f)
              if event_name == 'push':
                  head = ev.get('head_commit', {})
                  for key in ('added','modified','removed'):
                      for p in head.get(key, []) or []:
                          if p.startswith('src/'):
                              changed.append(p)
              elif event_name == 'pull_request':
                  # Pull request payload doesn't include full file list.
                  # We'll include the PR title to give context.
                  pr = ev.get('pull_request', {})
                  title = pr.get('title')
                  if title:
                      changed.append(f'PR: {title}')
          seen = []
          for c in changed:
              if c not in seen:
                  seen.append(c)
          output = json.dumps({'files': seen, 'actor': actor or ''})
          print(output)
          print(f"files={','.join(seen)}")
          print(f"actor={actor or ''}")
          PY
        shell: bash
      - name: Notify Team of Code Changes
        run: |
          FILES="${{ steps.detect.outputs.files }}"
          ACTOR="${{ steps.detect.outputs.actor }}"
          if [ -z "$FILES" ]; then
            echo "No application source files detected as changed under src/. Exiting without notification."
            exit 0
          fi
          IFS=',' read -r -a arr <<< "$FILES"
          for f in "${arr[@]}"; do
            display="$f"
            display=$(basename "$display")
            display="${display//_/ }"
            echo "APPLICATION CODE MODIFIED: $display"
            echo "Notifying team: ${ACTOR:-${{ github.actor }}}, user1_github, user2_github"
            echo "Timestamp: $(date)"
          done
          echo "Code modification notification completed."
